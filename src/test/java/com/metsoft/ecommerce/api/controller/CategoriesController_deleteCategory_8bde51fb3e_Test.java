/*
Test generated by RoostGPT for test java-unit-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Category ID is provided
   - Input: Category object with a valid ID
   - Expected Output: The function should delete the category from the repository and return a ResponseEntity with a status of 'OK' and a body message of 'Deleted'.

2. Scenario: Category ID is not provided (ID is 0)
   - Input: Category object with an ID of 0
   - Expected Output: The function should return a ResponseEntity with a status of 'Bad Request' and a body message of 'id is required'.

3. Scenario: Category ID provided does not exist in the repository
   - Input: Category object with a non-existing ID
   - Expected Output: Depending on the implementation of 'deleteById' in 'CategoryRepository', this might throw an exception or simply do nothing. It would be best to add a scenario where the ID does not exist in the repository to validate the behavior in this case.

4. Scenario: Category object is null
   - Input: null
   - Expected Output: This would likely throw a NullPointerException when trying to access the ID of the category. It would be good to have a test scenario for this to ensure appropriate error handling is in place.

5. Scenario: Category ID is a negative number
   - Input: Category object with a negative ID
   - Expected Output: Depending on the implementation of 'deleteById' in 'CategoryRepository', this might throw an exception or simply do nothing. It would be best to add a scenario where the ID is negative to validate the behavior in this case.

6. Scenario: Category ID is a very large number
   - Input: Category object with a very large ID
   - Expected Output: Depending on the implementation of 'deleteById' in 'CategoryRepository', this might throw an exception or simply do nothing. It would be best to add a scenario where the ID is a very large number to validate the behavior in this case.
*/
package com.metsoft.ecommerce.api.controller;

import com.metsoft.ecommerce.model.Category;
import com.metsoft.ecommerce.repository.CategoryRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;

@ExtendWith(MockitoExtension.class)
public class CategoriesController_deleteCategory_8bde51fb3e_Test {

    @InjectMocks
    private CategoriesController categoriesController;

    @Mock
    private CategoryRepository categoryRepository;

    private Category category;

    @BeforeEach
    public void setUp() {
        category = new Category();
    }

    @Test
    public void testDeleteCategory_idProvided() {
        category.setId(1);
        doNothing().when(categoryRepository).deleteById(category.getId());

        ResponseEntity<String> response = categoriesController.deleteCategory(category);

        assertThat(response.getStatusCodeValue()).isEqualTo(200);
        assertThat(response.getBody()).isEqualTo("Deleted");
    }

    @Test
    public void testDeleteCategory_idNotProvided() {
        category.setId(0);

        ResponseEntity<String> response = categoriesController.deleteCategory(category);

        assertThat(response.getStatusCodeValue()).isEqualTo(400);
        assertThat(response.getBody()).isEqualTo("id is required");
    }

    @Test
    public void testDeleteCategory_idDoesNotExist() {
        category.setId(999);
        doThrow(new IllegalArgumentException()).when(categoryRepository).deleteById(category.getId());

        assertThatThrownBy(() -> categoriesController.deleteCategory(category)).isInstanceOf(IllegalArgumentException.class);
    }

    @Test
    public void testDeleteCategory_nullCategory() {
        assertThatThrownBy(() -> categoriesController.deleteCategory(null)).isInstanceOf(NullPointerException.class);
    }

    @Test
    public void testDeleteCategory_negativeId() {
        category.setId(-1);
        doThrow(new IllegalArgumentException()).when(categoryRepository).deleteById(category.getId());

        assertThatThrownBy(() -> categoriesController.deleteCategory(category)).isInstanceOf(IllegalArgumentException.class);
    }

    @Test
    public void testDeleteCategory_largeId() {
        category.setId(Integer.MAX_VALUE);
        doThrow(new IllegalArgumentException()).when(categoryRepository).deleteById(category.getId());

        assertThatThrownBy(() -> categoriesController.deleteCategory(category)).isInstanceOf(IllegalArgumentException.class);
    }
}
