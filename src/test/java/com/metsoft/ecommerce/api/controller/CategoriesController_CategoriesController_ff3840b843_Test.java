/*
Test generated by RoostGPT for test java-unit-test using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Validate that the constructor correctly assigns the provided `CategoryRepository` to the `categoryRepository` field.

2. Test Scenario: Check if the `CategoryRepository` injected via constructor is not null.

3. Test Scenario: Validate the behavior of the controller when `CategoryRepository` methods are invoked.

4. Test Scenario: Test the controller's behavior when `CategoryRepository` returns an empty list of categories.

5. Test Scenario: Test the controller's behavior when `CategoryRepository` returns a non-empty list of categories.

6. Test Scenario: Validate the controller's behavior when `CategoryRepository` returns an `Optional<Category>` object.

7. Test Scenario: Test the controller's behavior when `CategoryRepository` returns an `Optional.empty()`.

8. Test Scenario: Test the behavior of the controller when `CategoryRepository` throws an exception.

9. Test Scenario: Validate the response of the controller when `CategoryRepository` is already populated with categories.

10. Test Scenario: Validate the response of the controller when `CategoryRepository` is empty.

11. Test Scenario: Test if the controller handles correctly the cases when `CategoryRepository` fails to connect to the database.

12. Test Scenario: Check how the controller handles situations when `CategoryRepository` returns null.

13. Test Scenario: Check the behavior of the controller when `CategoryRepository` returns a list of categories with null values.

14. Test Scenario: Test the behavior of the controller when `CategoryRepository` returns a category with incomplete data.

15. Test Scenario: Validate the controller's behavior when `CategoryRepository` returns a category with incorrect data types.
*/
package com.metsoft.ecommerce.api.controller;

import com.metsoft.ecommerce.model.Category;
import com.metsoft.ecommerce.repository.CategoryRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CategoriesController_CategoriesController_ff3840b843_Test {

    @Mock
    private CategoryRepository categoryRepository;
    private CategoriesController categoriesController;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        categoriesController = new CategoriesController(categoryRepository);
    }

    @Test
    public void testConstructor() {
        assertNotNull(categoriesController);
    }

    @Test
    public void testCategoryRepositoryNotNull() {
        assertNotNull(categoryRepository);
    }

    @Test
    public void testGetCategories_Empty() {
        when(categoryRepository.findAll()).thenReturn(new ArrayList<>());

        List<Category> result = categoriesController.getCategories();

        assertTrue(result.isEmpty());
        verify(categoryRepository, times(1)).findAll();
    }

    @Test
    public void testGetCategories_NotEmpty() {
        List<Category> mockCategories = new ArrayList<>();
        mockCategories.add(new Category());
        when(categoryRepository.findAll()).thenReturn(mockCategories);

        List<Category> result = categoriesController.getCategories();

        assertFalse(result.isEmpty());
        assertEquals(1, result.size());
        verify(categoryRepository, times(1)).findAll();
    }

    @Test
    public void testGetCategoryById_NotFound() {
        int id = 1;
        when(categoryRepository.findById(id)).thenReturn(Optional.empty());

        ResponseEntity result = categoriesController.getCategoryById(id);

        assertEquals(404, result.getStatusCodeValue());
        verify(categoryRepository, times(1)).findById(id);
    }

    @Test
    public void testGetCategoryById_Found() {
        int id = 1;
        Category mockCategory = new Category();
        when(categoryRepository.findById(id)).thenReturn(Optional.of(mockCategory));

        ResponseEntity result = categoriesController.getCategoryById(id);

        assertEquals(200, result.getStatusCodeValue());
        verify(categoryRepository, times(1)).findById(id);
    }

    // TODO: Add more test cases for saveCategory, updateCategory, deleteCategory methods
}
