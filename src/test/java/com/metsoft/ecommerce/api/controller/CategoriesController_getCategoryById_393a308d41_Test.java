/*
Test generated by RoostGPT for test java-unit-test using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Get Category by Valid ID
   - Description: This test scenario will validate the getCategoryById function when a valid ID is provided.
   - Input: Provide a valid ID which is available in the category repository.
   - Expected Result: The function should return a ResponseEntity with status 200 (OK) and the category object corresponding to the given ID.

2. Test Scenario: Get Category by Invalid ID
   - Description: This test scenario will validate the getCategoryById function when an invalid ID (i.e., an ID that does not exist in the category repository) is provided.
   - Input: Provide an invalid ID which is not available in the category repository.
   - Expected Result: The function should return a ResponseEntity with status 404 (Not Found) and a message indicating that the category was not found.

3. Test Scenario: Get Category by Negative ID
   - Description: This test scenario will validate the getCategoryById function when a negative ID is provided.
   - Input: Provide a negative ID.
   - Expected Result: The function should return a ResponseEntity with status 404 (Not Found) and a message indicating that the category was not found.

4. Test Scenario: Get Category by Zero ID
   - Description: This test scenario will validate the getCategoryById function when the ID is zero.
   - Input: Provide an ID of zero.
   - Expected Result: The function should return a ResponseEntity with status 404 (Not Found) and a message indicating that the category was not found.

5. Test Scenario: Get Category by Null ID
   - Description: This test scenario will validate the getCategoryById function when a null ID is provided.
   - Input: Provide a null ID.
   - Expected Result: Depending on the implementation, this could result in an error or a ResponseEntity with status 404 (Not Found) and a message indicating that the category was not found. 

6. Test Scenario: Get Category by ID of a Deleted Category
   - Description: This test scenario will validate the getCategoryById function when the ID of a deleted category is provided.
   - Input: Provide the ID of a category that has been deleted from the category repository.
   - Expected Result: The function should return a ResponseEntity with status 404 (Not Found) and a message indicating that the category was not found.
*/
package com.metsoft.ecommerce.api.controller;

import com.metsoft.ecommerce.model.Category;
import com.metsoft.ecommerce.repository.CategoryRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

public class CategoriesController_getCategoryById_393a308d41_Test {

    @InjectMocks
    private CategoriesController categoriesController;

    @Mock
    private CategoryRepository categoryRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetCategoryById_ValidId() {
        Category category = new Category();
        category.setId(1);
        when(categoryRepository.findById(1)).thenReturn(Optional.of(category));

        ResponseEntity result = categoriesController.getCategoryById(1);
        assertEquals(200, result.getStatusCodeValue());
        assertTrue(result.getBody() instanceof Optional);
        assertEquals(category, ((Optional) result.getBody()).get());
    }

    @Test
    public void testGetCategoryById_InvalidId() {
        when(categoryRepository.findById(1)).thenReturn(Optional.empty());

        ResponseEntity result = categoriesController.getCategoryById(1);
        assertEquals(404, result.getStatusCodeValue());
        assertEquals("category not found", result.getBody());
    }

    @Test
    public void testGetCategoryById_NegativeId() {
        when(categoryRepository.findById(-1)).thenReturn(Optional.empty());

        ResponseEntity result = categoriesController.getCategoryById(-1);
        assertEquals(404, result.getStatusCodeValue());
        assertEquals("category not found", result.getBody());
    }

    @Test
    public void testGetCategoryById_ZeroId() {
        when(categoryRepository.findById(0)).thenReturn(Optional.empty());

        ResponseEntity result = categoriesController.getCategoryById(0);
        assertEquals(404, result.getStatusCodeValue());
        assertEquals("category not found", result.getBody());
    }

    @Test
    public void testGetCategoryById_DeletedCategoryId() {
        Category category = new Category();
        category.setId(1);
        when(categoryRepository.findById(1)).thenReturn(Optional.of(category));
        categoryRepository.deleteById(category.getId());

        ResponseEntity result = categoriesController.getCategoryById(1);
        assertEquals(404, result.getStatusCodeValue());
        assertEquals("category not found", result.getBody());
    }
}
