/*
Test generated by RoostGPT for test java-unit-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Verify that the function returns a "Bad Request" response when the category id is not provided.
   Given the category object with id=0,
   When the function updateCategory is called,
   Then it should return a "Bad Request" response and message "id is required".

2. Scenario: Verify that the function returns a "Bad Request" response when the category id is null.
   Given the category object with id=null,
   When the function updateCategory is called,
   Then it should return a "Bad Request" response and message "id is required".

3. Scenario: Verify that the function returns an "OK" response when a valid category with id is provided.
   Given a valid category object with id!=0,
   When the function updateCategory is called,
   Then it should return an "OK" response.

4. Scenario: Verify that the function updates the category in the repository when a valid category with id is provided.
   Given a valid category object with id!=0,
   When the function updateCategory is called,
   Then the category with the same id in the repository should be updated.

5. Scenario: Verify that the function returns the updated category in the response body when a valid category with id is provided.
   Given a valid category object with id!=0,
   When the function updateCategory is called,
   Then the response body should contain the updated category.

6. Scenario: Verify that the function does not update the category in the repository when the category id is not provided.
   Given the category object with id=0,
   When the function updateCategory is called,
   Then the category with the same id in the repository should not be updated.

7. Scenario: Verify that the function does not update the category in the repository when the category id is null.
   Given the category object with id=null,
   When the function updateCategory is called,
   Then the category with the same id in the repository should not be updated.

8. Scenario: Verify that the function handles non-existent category id.
   Given a category object with id that does not exist in the repository,
   When the function updateCategory is called,
   Then it should handle the scenario gracefully, possibly returning an appropriate error message or status.
*/
package com.metsoft.ecommerce.api.controller;

import com.metsoft.ecommerce.model.Category;
import com.metsoft.ecommerce.repository.CategoryRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class CategoriesController_updateCategory_f725e549a1_Test {

    @Mock
    private CategoryRepository categoryRepository;

    private CategoriesController categoriesController;

    @BeforeEach
    void setUp() {
        categoriesController = new CategoriesController(categoryRepository);
    }

    @Test
    public void testUpdateCategory_whenCategoryIdIsNotProvided_shouldReturnBadRequestResponse() {
        Category category = new Category();
        category.setId(0);

        ResponseEntity response = categoriesController.updateCategory(category);

        assertEquals(400, response.getStatusCodeValue());
        assertEquals("id is required", response.getBody());
    }

    @Test
    public void testUpdateCategory_whenCategoryIdIsNull_shouldReturnBadRequestResponse() {
        Category category = new Category();

        ResponseEntity response = categoriesController.updateCategory(category);

        assertEquals(400, response.getStatusCodeValue());
        assertEquals("id is required", response.getBody());
    }

    @Test
    public void testUpdateCategory_whenValidCategoryIsProvided_shouldReturnOkResponse() {
        Category category = new Category();
        category.setId(1);

        when(categoryRepository.save(any(Category.class))).thenReturn(category);

        ResponseEntity response = categoriesController.updateCategory(category);

        assertEquals(200, response.getStatusCodeValue());
        assertTrue(response.getBody() instanceof Category);
    }

    @Test
    public void testUpdateCategory_whenValidCategoryIsProvided_shouldUpdateCategoryInRepository() {
        Category category = new Category();
        category.setId(1);

        when(categoryRepository.save(any(Category.class))).thenReturn(category);

        categoriesController.updateCategory(category);

        verify(categoryRepository, times(1)).save(category);
    }

    @Test
    public void testUpdateCategory_whenValidCategoryIsProvided_shouldReturnUpdatedCategoryInResponseBody() {
        Category category = new Category();
        category.setId(1);

        when(categoryRepository.save(any(Category.class))).thenReturn(category);

        ResponseEntity response = categoriesController.updateCategory(category);

        assertEquals(category, response.getBody());
    }

    @Test
    public void testUpdateCategory_whenCategoryIdIsNotProvided_shouldNotUpdateCategoryInRepository() {
        Category category = new Category();
        category.setId(0);

        categoriesController.updateCategory(category);

        verify(categoryRepository, times(0)).save(category);
    }

    @Test
    public void testUpdateCategory_whenCategoryIdIsNull_shouldNotUpdateCategoryInRepository() {
        Category category = new Category();

        categoriesController.updateCategory(category);

        verify(categoryRepository, times(0)).save(category);
    }

    @Test
    public void testUpdateCategory_whenNonExistentCategoryIdIsProvided_shouldHandleGracefully() {
        Category category = new Category();
        category.setId(999);

        when(categoryRepository.save(any(Category.class))).thenReturn(category);

        ResponseEntity response = categoriesController.updateCategory(category);

        assertEquals(200, response.getStatusCodeValue());
        assertTrue(response.getBody() instanceof Category);
    }
}
