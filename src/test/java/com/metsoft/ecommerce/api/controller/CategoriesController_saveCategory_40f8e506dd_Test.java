/*
Test generated by RoostGPT for test java-unit-test using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Valid Category
Description: Test the saveCategory function with a valid Category object, where the ID field is 0.

Test Scenario 2: Invalid Category - ID already exists
Description: Test the saveCategory function with a Category object where the ID field is not 0. In this case, the function should return a bad request response.

Test Scenario 3: Null Category
Description: Test the saveCategory function with a null Category object. The function should handle this gracefully and not throw a null pointer exception.

Test Scenario 4: Valid Category - Check Repository
Description: After saving a valid Category object, check the repository to ensure that the category was actually saved. This can be done by retrieving the category from the repository and comparing it to the original category.

Test Scenario 5: Invalid Category - Check Repository
Description: After attempting to save an invalid Category object (where the ID field is not 0), check the repository to ensure that the category was not saved. This can be done by trying to retrieve the category from the repository, which should return null or throw an exception.

Test Scenario 6: Check Response
Description: Check the response of the saveCategory function to ensure it's correct. For a valid Category, the response should be OK (200). For an invalid Category, the response should be Bad Request (400).

Test Scenario 7: Check Response Body
Description: Check the body of the response of the saveCategory function. For a valid Category, the body should contain the saved category. For an invalid Category, the body should contain an error message. 

Test Scenario 8: Check Category ID Generation
Description: Check that the ID of the category is being generated correctly when a new category is saved. This can be done by comparing the ID of the saved category to the ID of the last category in the repository before the save operation. The ID of the saved category should be greater than the previous last category's ID.
*/
package com.metsoft.ecommerce.api.controller;

import com.metsoft.ecommerce.model.Category;
import com.metsoft.ecommerce.repository.CategoryRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class CategoriesController_saveCategory_40f8e506dd_Test {

    @InjectMocks
    private CategoriesController categoriesController;

    @Mock
    private CategoryRepository categoryRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testSaveCategory_ValidCategory() {
        Category category = new Category();
        category.setId(0);
        category.setName("Electronics");

        when(categoryRepository.save(any(Category.class))).thenReturn(category);

        ResponseEntity response = categoriesController.saveCategory(category);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(category, response.getBody());
    }

    @Test
    public void testSaveCategory_InvalidCategory() {
        Category category = new Category();
        category.setId(1);
        category.setName("Electronics");

        ResponseEntity response = categoriesController.saveCategory(category);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("id is generated value. You cannot assign.", response.getBody());
    }

    @Test
    public void testSaveCategory_NullCategory() {
        Category category = null;

        assertThrows(NullPointerException.class, () -> {
            categoriesController.saveCategory(category);
        });
    }

    @Test
    public void testSaveCategory_CheckRepository() {
        Category category = new Category();
        category.setId(0);
        category.setName("Electronics");

        when(categoryRepository.save(any(Category.class))).thenReturn(category);

        categoriesController.saveCategory(category);
        Category savedCategory = categoryRepository.save(category);

        assertEquals(category, savedCategory);
    }

    @Test
    public void testSaveCategory_CheckRepositoryInvalidCategory() {
        Category category = new Category();
        category.setId(1);
        category.setName("Electronics");

        categoriesController.saveCategory(category);
        Category savedCategory = categoryRepository.save(category);

        assertNotEquals(category, savedCategory);
    }

    @Test
    public void testSaveCategory_CheckResponse() {
        Category category = new Category();
        category.setId(0);
        category.setName("Electronics");

        when(categoryRepository.save(any(Category.class))).thenReturn(category);

        ResponseEntity response = categoriesController.saveCategory(category);
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    public void testSaveCategory_CheckResponseBody() {
        Category category = new Category();
        category.setId(0);
        category.setName("Electronics");

        when(categoryRepository.save(any(Category.class))).thenReturn(category);

        ResponseEntity response = categoriesController.saveCategory(category);
        assertEquals(category, response.getBody());
    }
}
