/*
Test generated by RoostGPT for test java-unit-test using AI Type Open AI and AI Model gpt-4

Test Scenario 1: 
- Description: Check if the product is successfully saved in the repository
- Steps: 
  1. Create a new product object with all required fields
  2. Call the saveProduct function with the new product object
  3. Verify that the returned product object is the same as the one saved

Test Scenario 2: 
- Description: Check if the product's creation date is set correctly
- Steps: 
  1. Create a new product object with all required fields
  2. Call the saveProduct function with the new product object
  3. Verify that the creation date of the returned product object is set to the current date

Test Scenario 3: 
- Description: Check if the function handles null product object
- Steps: 
  1. Call the saveProduct function with null
  2. Verify that the function throws an appropriate exception

Test Scenario 4: 
- Description: Check if the function handles product object with missing required fields
- Steps: 
  1. Create a new product object without setting the required fields
  2. Call the saveProduct function with the new product object
  3. Verify that the function throws an appropriate exception

Test Scenario 5: 
- Description: Check if the function handles existing product object
- Steps: 
  1. Create a new product object and save it in the repository
  2. Call the saveProduct function with the existing product object
  3. Verify that the function updates the existing product object, including the creation date

Test Scenario 6:
- Description: Check if the function can handle multiple concurrent save requests
- Steps:
  1. Create several new product objects
  2. Call the saveProduct function concurrently with these product objects
  3. Verify that all product objects are saved correctly in the repository
*/
package com.metsoft.ecommerce.api.mutation;

import com.coxautodev.graphql.tools.GraphQLMutationResolver;
import com.metsoft.ecommerce.model.Product;
import com.metsoft.ecommerce.repository.ProductRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@SpringBootTest
public class ProductMutationResolver_saveProduct_533036c806_Test {

    private ProductMutationResolver productMutationResolver;

    @Mock
    private ProductRepository productRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        productMutationResolver = new ProductMutationResolver(productRepository);
    }

    @Test
    public void testSaveProductSuccess() {
        Product product = new Product();
        when(productRepository.save(any(Product.class))).thenReturn(product);

        Product result = productMutationResolver.saveProduct(product);

        assertNotNull(result);
        assertEquals(result, product);
    }

    @Test
    public void testSaveProductCreationDate() {
        Product product = new Product();
        when(productRepository.save(any(Product.class))).thenReturn(product);

        Product result = productMutationResolver.saveProduct(product);

        assertNotNull(result.getCreateDate());
        assertTrue(result.getCreateDate().before(new Date()));
    }

    @Test
    public void testSaveProductNull() {
        assertThrows(NullPointerException.class, () -> {
            productMutationResolver.saveProduct(null);
        });
    }

    @Test
    public void testSaveProductMissingFields() {
        Product product = new Product();
        when(productRepository.save(any(Product.class))).thenThrow(new IllegalArgumentException());

        assertThrows(IllegalArgumentException.class, () -> {
            productMutationResolver.saveProduct(product);
        });
    }

    @Test
    public void testSaveProductExistingProduct() {
        Product product = new Product();
        when(productRepository.save(any(Product.class))).thenReturn(product);

        Product result = productMutationResolver.saveProduct(product);

        assertNotNull(result);
        assertEquals(result, product);
        assertNotNull(result.getCreateDate());
        assertTrue(result.getCreateDate().before(new Date()));
    }

    @Test
    public void testSaveProductConcurrentRequests() {
        Product product1 = new Product();
        Product product2 = new Product();
        Product product3 = new Product();
        when(productRepository.save(any(Product.class))).thenAnswer(i -> i.getArguments()[0]);

        Product result1 = productMutationResolver.saveProduct(product1);
        Product result2 = productMutationResolver.saveProduct(product2);
        Product result3 = productMutationResolver.saveProduct(product3);

        assertNotNull(result1);
        assertNotNull(result2);
        assertNotNull(result3);
        assertEquals(result1, product1);
        assertEquals(result2, product2);
        assertEquals(result3, product3);
    }
}
